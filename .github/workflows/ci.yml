name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  style:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: rustfmt

      - name: Check .rs files
        run: cargo +nightly fmt --all -- --check

      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install taplo-cli
        run: cargo binstall --no-confirm --no-discover-github-token --force taplo-cli

      - name: Check .toml files
        run: taplo fmt --check --diff

  check:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Lint with clippy
        run: cargo clippy -- -D warnings

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked

      - name: Check for security vulnerabilities
        run: cargo audit

  msrv:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-binstall
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-binstall

      - name: Install cargo-msrv
        run: cargo binstall --no-confirm --no-discover-github-token --force cargo-msrv

      - name: Check minimum supported Rust version
        run: cargo msrv --path crates/core verify

  test-core:
    name: "test core crate on ${{ matrix.os }}"
    needs:
      - style
      - check
      - msrv
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest, cargo-llvm-cov

      - name: Run unit tests
        run: cargo nextest run --tests --package auto-palette

      - name: Run unit tests with coverage
        if: matrix.os == 'ubuntu-latest'
        run: cargo llvm-cov nextest --all-features --package auto-palette --codecov --output-path codecov.json

      - name: Upload coverage reports to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4.3.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: codecov.json
          fail_ci_if_error: true

  test-wasm:
    name: "test wasm crate"
    needs:
      - style
      - check
      - msrv
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Run unit tests
        run: cargo nextest run --tests --package auto-palette-wasm

      - name: Run wasm-pack test on Chrome
        run: wasm-pack test --headless --chrome ./crates/wasm/

      - name: Run wasm-pack test on Firefox
        run: wasm-pack test --headless --firefox ./crates/wasm/

  build-core:
    needs:
      - test-core
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build library in release mode
        run: cargo build --lib --release

  build-wasm:
    needs:
      - test-wasm
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: packages/auto-palette
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      - name: Setup pnpm
        run: corepack enable

      - name: Setup Node.js with 22.x version
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://registry.npmjs.org/
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build the WASM module
        run: pnpm build:wasm

      - name: Run the unit tests
        run: pnpm test

      - name: Build the project
        run: pnpm build
